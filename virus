#include <websocketpp/config/asio_no_tls.hpp>
#include <websocketpp/server.hpp>
#include <iostream>
#include <thread>
#include <chrono>
#include <cstdlib>

typedef websocketpp::server<websocketpp::config::asio> server;

using websocketpp::lib::placeholders::_1;
using websocketpp::lib::placeholders::_2;
using websocketpp::lib::bind;

void on_message(server* s, websocketpp::connection_hdl hdl, server::message_ptr msg) {
    std::cout << "Received message: " << msg->get_payload() << std::endl;
}

void send_polygon(server* s, websocketpp::connection_hdl hdl) {
    while (true) {
        // Generate random polygon points
        std::string polygon_points = "[";
        for (int i = 0; i < 5; i++) {
            int x = rand() % 500;
            int y = rand() % 500;
            polygon_points += "{\"x\":" + std::to_string(x) + ",\"y\":" + std::to_string(y) + "}";
            if (i < 4) polygon_points += ",";
        }
        polygon_points += "]";

        // Send the polygon points to the client
        s->send(hdl, "{\"points\":" + polygon_points + "}", websocketpp::frame::opcode::text);

        // Wait for a bit before sending the next polygon
        std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    }
}

int main() {
    server ws_server;

    // Set up logging
    ws_server.set_access_channels(websocketpp::log::alevel::all);
    ws_server.clear_access_channels(websocketpp::log::alevel::frame_payload);

    // Initialize ASIO
    ws_server.init_asio();

    // Register message handler
    ws_server.set_message_handler(bind(&on_message, &ws_server, ::_1, ::_2));

    // Start the server
    ws_server.listen(8080);
    ws_server.start_accept();

    // Get the connection handle
    websocketpp::connection_hdl hdl;
    std::thread sender_thread(send_polygon, &ws_server, hdl);

    // Run the server
    ws_server.run();

    sender_thread.join();
    return 0;
}